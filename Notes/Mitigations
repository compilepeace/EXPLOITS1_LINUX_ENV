

# ASLR (Address Space layout Randomization)
=>
	$ sudo sysctl kernel.randomize_va_space=1		# To randomize the Virtual Address Space


#	DEP (Data Execution Prevention)
=>	The regions in memory (like stack segment) are made NX (Non-executable), which makes the 
	differentiation b/w instructions and data possible. Due to this we can't execute our shellcode
	kept on stack.
	
	Turnaround - We have the 'Glibc' standard library always loaded in the process address space of
				 every process. Thus we leverage this fact and use ROP (Return Oriented Programming)
				 to do what we want to do.

	$ ldd ./executable_elf
	linux-gate.so.1	=> (0xffffe000)
	libc.so.6 => /lib/libc.so.6 (0xb7e89000)
	/lib/ld-linux.so.2 (0xb7fe5000)


	When executing system() from libc, the system() expects the stack to look like -

	              ^
	              |	
	 Stack growth |							
	|             |        |	
	|----------------------|
	|     Return Address   | <-- Address of system()
	|----------------------|
	| Bogus Return Address | 
	|----------------------|
	| pointer to '/bin/sh' | <-- Argument to system()
	|----------------------|

	We will need 3 things -

	1.	Address of system() 			{gdb> x/i system || gdb> x system || gdb>print system}
	2.	Pointer to '/bin/sh'
	3.	bogus return address


=>	In windows, we call VirtualProtect() to disable DEP.
